# This is a hand-generated sidebar for the spec.  The text comes
# from grepping the kramdown spec for lines starting with #
entries:
- title: sidebar
  folders:

  - title: Language Specification
    url: /lang-spec/
    output: web
    type: web
    folderitems:

    - title: Introduction
      url: /lang-spec/
# The #introduction anchor is deliberatly missing.
# giving this item a url that is teh same as the
# permalink of the page is what keeps the sidebar open.
# The trailing / is required!
      output: web

    - title: User Model
      url: /lang-spec#user-model
      output: web
      type: web

    - title: Syntax
      url: /lang-spec#syntax
      output: web
      type: web

    - title: Built-in Objects
      url: /lang-spec#built-in-objects
      output: web
      type: web

    - title: Declarations
      url: /lang-spec#declarations
      output: web
      type: web

    - title: Objects, Classes, and Traits
      url: /lang-spec#objects-classes-and-traits
      output: web
      type: web

    - title: Method Requests
      url: /lang-spec#method-requests
      output: web
      type: web

    - title: Pattern Matching
      url: /lang-spec#pattern-matching
      output: web
      type: web

    - title: Exceptions
      url: /lang-spec#exceptions
      output: web
      type: web

    - title: Types
      url: /lang-spec#types
      output: web
      type: web

    - title: Modules and Dialects
      url: /lang-spec#modules-and-dialects
      output: web
      type: web

    - title: Pragmatics
      url: /lang-spec#pragmatics
      output: web
      type: web

    - title: Acknowledgements
      url: /lang-spec#acknowledgements
      output: web
      type: web

    - title: Grammar
      url: /lang-spec#grammar
      output: web
      type: web


## Introduction
## User Model
## Syntax
### Character Equivalencies
### Layout
### Comments
### Identifiers and Operators
### Reserved Tokens
### Newlines, Tabs and Control Characters
## Built-in Objects
### Done
### Elipsis
### Numbers
### Booleans
### Strings
#### String Literals
#### String Constructors
#### Uninterpreted Strings
### Lineups
### Blocks
## Declarations
### Fields
#### Constants
#### Variables
### Methods
#### Method Names
#### Method parameters
#### Type Parameters
#### Returning a Value from a Method
### Annotations
### Encapsulation
#### Public
#### Confidential
#### Methods, Classes, Traits and Types
#### Fields
#### No Private Attributes
## Objects, Classes, and Traits
### Objects
### Class Declarations
### Trait Objects and Trait Declarations
### Type Parameters
### Reuse
#### Object Combination and Initialisation
#### Required Methods
#### Overriding Methods
#### Default Methods
## Method Requests
### Self
### Outer
### Named Requests
#### Delimited Arguments
#### Implicit Requests
###Assignment Requests
### Binary Operator Requests
### Unary Prefix Operator Requests
### Precedence of Method Requests
### Requesting Methods with Type Parameters
### Manifest Expressions
## Pattern Matching
### Matching Blocks
### Self-Matching Objects
## Exceptions
### Kinds of Exception
### Exception Packets
### Catching Exceptions
## Types
### Predeclared Types
#### Type None
#### Type Object
#### Type Self
#### Type Unknown
#### Type Type
### Interfaces and Type Literals
### Type Declarations
### Type Conformance
### Composite types
#### Variant Types
#### Intersection Types
#### Union Types
#### Type Subtraction
#### Nested Types
### Type Assertions
## Modules and Dialects
### Modules
### Importing Modules
### Executing a Module
### Dialects
### Module and Dialect Scopes
## Pragmatics
### Garbage Collection
### Concurrency
## Acknowledgements
## Grammar
